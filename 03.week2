# [Relay16-2주차] 응답하라! 그 때 우리!! 기획 정리

## 1. 프론트엔드 작업 내용 정리 😀

### (0) 담당 팀원

- J032 김동현
- J106 신지연
- J181 전우민
- J220 황석영

### (1) 사용 기술

- HTML + CSS
- Vanilla JavaScript

### (2) 구현 내용

- 로그인 페이지 구현 (login.html)
- 메인 페이지 구현(main.html)
- 채팅 페이지 구현(chat.html)
- socket.io-client를 통한 소켓 구현
- fetch를 이용한 서버와의 통신 구현 (로그인 및 유저 데이터 불러오기)

### (3) 인수 인계

- 현재 회원가입 기능은 따로 없으며, DB에 더미 계정을 생성해놓고 시작합니다.
- 채팅은 현재 1:1로만 가능하며, local에서 작업할 시에 다른 브라우저를 키시면 다른 USER로 채팅을 이용하실 수 있습니다.
- 브라우저를 종료할시에 소켓 연결이 끊기며, 이때 상대방과의 연결이 끊어졌다는 메세지와 함께 main으로 화면전환 기능을 구현해주시면 감사하겠습니다. (+채팅 종료 버튼 추가)
- 채팅 시 상대방의 이름이 나오며 상대방의 대화는 왼쪽, 본인의 대화목록은 오른쪽에 나오도록 구현 부탁드립니다.
- 전체적인 CSS 보완 부탁드립니다 👍

---

## 2. 자연어 처리 작업 내용 정리

### (0) 담당 팀원

- J070 문창주
- J144 이성호

### (1) 사용 기술  

- KoNLPy: 한국어 자연어 처리 오픈소스 라이브러리
- Tensorflow: 파이썬 인공지능 라이브러리

### (2) 구현 내용  

- [KoNLPy](https://konlpy.org/en/latest/) 라이브러리를 이용하여 대화 내용 중 키워드가 될 수 있는 후보군 추출.
- 추출된 후보군 중 취미, 직업, 성격 등의 정보를 담고 있는 키워드 들을 추출.
- 키워드를 추출하기 위해서 Tensorflow 라이브러리를 이용, 모델을 학습시킨 뒤 저장.
- 채팅내용에서 키워드를 추출할 때는 저장된 모델을 불러와 작업을 진행한다.

### (3) 작동 방식

- node.js 에서 phython 모듈 호출
- 입력 형식 : JSON
- 출력 형식 : JSON

### (4) data 내용
- 학습에 사용된 data
- 데이터 전처리 과정 data
- `learend model 폴더` 학습된 모델

### (5) 실행 예시

`JSON 입력, 콘솔 결과, JSON 출력`

```
{
	"name": "문창주",
	"line": [
		"컴퓨터가 고장나서 코딩 못했다.",
		"머신러닝 이걸 왜한다고 해가지고",
		"파이썬 쉽다면서요",
		"새 키보드가 갖고 싶다",
		"하루종일 아무것도 안했다",
		"아무것도 하기 싫다",
		"나는 잘 모르겠다",
		"감정 분류가 잘안됩니다",
		"어제 강남에서 곱창먹었음"
	]
}
예상 job : 프로그래머
예상 hobby : 게임
예상 character : 정서적
예상 region : 서울
예상 PN : 주로 부정적 대화, 비중 : 85.71%
{
	"name": "문창주",
	"job": "프로그래머",
	"hobby": "게임",
	"character": "정서적",
	"region": "서울",
	"pn": [
		"주로 부정적 대화",
		85.71428571428571
	]
}
```

### (6) 인수 인계

- 백엔드 부분과 연동이 되어 있지 않습니다. 연동 좀 부탁드립니다 ㅠㅠ
- 카테고리별 키워드가 많이 부족합니다. 카테고리 항목 추가가 필요합니다.
- 카테고리는 `data` 폴더의 `categories.txt` 파일에 `바이트스트림`으로 저장되어 있습니다.

---

## 3. 로그인-세션 작업 내용 정리

### (0) 담당 팀원

- J105 신준수
- J143 이석현

### (1) 사용 기술

- jsonwebtoken: json 기반 토큰 발급 라이브러리
- sequelize: DB 호출

### (2) 구현 내용

- login.html을 통해서 제출된 POST 메시지를 검증
  - DB상에 저장된 유저의 ID / PW 와 검증
  - api 호출 경로: `/api/login/signin` 에 POST 메시지
    - POST 메시지 body 형식: {"user_id": "jk", "user_pwd": "relay16"}
    - 리턴되는 메시지 형식: "발급된토큰"
- ID / PW가 일치할 경우 jwt 토큰 발급 (user_id와 secret key를 이용)
  - 발급된 토큰은 client의 cookie에 저장됨
- cookie에 저장된 토큰을 이용하여 main.html 페이지에서 유저의 닉네임을 표시
- 토큰을 decoding 할 경우 sign 시에 사용한 user_id를 추출 가능
- user_id를 이용하여 DB의 users table에 Query 하여 유저정보 수령
- api 호출 경로: `/api/login/getUser` 에 GET 메시지
  - GET 메시지 body 형식: 없음 (cookie의 토큰 자동 전송)
  - 리턴되는 메시지 형식: {"nickname": "김정"}

---

## 4. 채팅(백엔드) 작업 내용 정리

### (0) 담당 팀원

- J031 김동인
- J069 문예은

### (1) 사용 기술, 모듈

- socket.io : 채팅 소켓 연결에 사용
- child_process : node에서 python 자연어처리 함수를 호출하기 위해 사용

### (2) 구현 내용

- `/src/index.js` 에서 채팅서버 설정, 8080포트에 연결
- `/front/js/index.js` 에서 개별 소켓이 접속, 메시지 전송, 연결 종료 시 발생하는 서버와의 통신 내용 구현
- `/src/routes/chat/index.js` 에 url 접속 라우팅 기능 구현
- `/src/modules/socketConnection.js` 에서 서버소켓이 유저소켓으로부터 접속, 메세지수신, 종료 신호를 받을 때 통신 내용 구현  
  또한 유저 별 채팅로그를 저장해두었다가 해당 유저가 __접속 종료__ 시 유저가 남겼던 모든 채팅로그를 자연어처리 함수로 보내주어 유저 성향 분석

### (3) 인수 인계

- 현재로서는 채팅 방 하나가 존재하고 그곳에 아무나 막 접속이 가능한 형태이므로 서버 내 채팅 방이 여러개 생성될 수 있고 각 방마다 두명씩 입장할 수 있게 구현이 되어야 합니다.
- 추후 유저 매칭 시스템이 구현되어 유저 소켓에서 채팅 매칭을 요청하면 서버에서 알맞은 유저를 매칭시켜 연결된 두 유저만 한 채팅방에 입장할 수 있도록 되어야 합니다.

---

## 5. DataBase

### (0) 담당 팅원

- J180 전세웅

### 작업 내용

- db type: mysql of NCP
- db model
  - users : [id,nickname,password,character,job,hobby]  
  - userkeywords : [id,userid,keyword]

- db sync by ORM - Sequelize
  - refer : http://52.78.22.201/tutorials/expressjs/expressjs_orm_two/#tocAnchor-1-4
  - !!!!relay16/src/sequelize/models/index.js -- comments part on => node index.js to sync force, this function reset all db, jo sim!!
- db connect config (dotenv)
  - relay_16/src/sequelize/config.js -- using .env file and .gitignore please DM to J180_전세웅
- api service - set api url by __dir structure and filename for later extension
  - user : readOne,Create,Update
  - userkeyword : readAll, readOne, Create
- made sample code for help using sequelize in node, please check relay_16/src/sample.js
- to test users table fetch try sending a GET request to /api/user/jk
  - 'jk' can be substituted for any other user id

## 6. NCP 서버 호스팅 정리

### (0) 담당 팀원

- J105 신준수

### (1) 사용 기술  

- Naver Cloud Platform

### (2) 구현 내용

- Naver Cloud Platform 을 이용하여 리눅스 서버 호스팅
  - Node.js v12 설치 및 구동환경 세팅
  - Github repo와 연동하여 호스팅
  - SSH 접속으로 리눅스 제어
    - 접근주소 / 포트 / 계정의 경우 J105 신준수에게 Slack DM으로 문의
- Naver Cloud Platfom 을 이용하여 mySQL DB서버 호스팅
  - 위 리눅스 서버와 독립적으로 구동
  - 접근주소 / 포트 / 계정의 경우 J105 신준수에게 Slack DM으로 문의
- 서비스 호스팅
  - 주소: http://49.50.160.97:8080/
  - Sample 계정(ID / PW) 
    - 계정 1: crong / crong
    - 계정 2: jk / relay16
  - 예시화면
![예시화면](https://i.imgur.com/jKnAq9P.png)
